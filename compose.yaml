# version: '3.8'
name: template01
services:
  product_services:
    build:
      context: ./product_services
      dockerfile: Dockerfile
    volumes:
      - ./product_services:/code  # Sync local development directory with the container
    depends_on:
        - product_db
        - broker
    ports:
      - "8000:8000"  # Expose container port 8000 to host port 8000  
  
  product_db:
    image: postgres:latest  # Use the official PostgreSQL image
    restart: always
    container_name: product_db_container
    environment:
        - POSTGRES_USER= ${POSTGRES_USER_PRODUCT}
        - POSTGRES_PASSWORD=${POSTGRES_PASSWORD_PRODUCT}
        - POSTGRES_DB=${POSTGRES_DB_PRODUCT}
    ports:
        - '5432:5432'
    volumes:
        - product_db:/var/lib/postgresql/data

  inventory_services:
    build:
      context: ./inventory_services
      dockerfile: Dockerfile
    volumes:
      - ./inventory_services:/code  # Sync local development directory with the container
    depends_on:
        - inventory_db
        - broker
    ports:
      - "8001:8000"  # Expose container port 8000 to host port 8000  
  
  inventory_db:
    image: postgres:latest  # Use the official PostgreSQL image
    restart: always
    container_name: inventory_db_container
    environment:
        - POSTGRES_USER=${POSTGRES_USER_INVENTORY}
        - POSTGRES_PASSWORD=${POSTGRES_PASSWORD_INVENTORY}
        - POSTGRES_DB=${POSTGRES_DB_INVENTORY}
    ports:
        - '5433:5432'
    volumes:
        - inventory_db:/var/lib/postgresql/data

  user_services:
    build:
      context: ./user_services
      dockerfile: Dockerfile
    volumes:
      - ./user_services:/code  # Sync local development directory with the container
    depends_on:
        - user_db
        - broker
    ports:
      - "8002:8000"  # Expose container port 8000 to host port 8000  
  
  user_db:
    image: postgres:latest  # Use the official PostgreSQL image
    restart: always
    container_name: user_services_db_container
    environment:
        - POSTGRES_USER=${POSTGRES_USER_USER}
        - POSTGRES_PASSWORD=${POSTGRES_PASSWORD_USER}
        - POSTGRES_DB=${POSTGRES_DB_USER}
    ports:
        - '5436:5432'
    volumes:
        - user_db:/var/lib/postgresql/data
  
  order_services:
    build:
      context: ./order_services
      dockerfile: Dockerfile
    volumes:
      - ./order_services:/code  # Sync local development directory with the container
    depends_on:
        - order_db
        - broker
    ports:
      - "8003:8000"  # Expose container port 8000 to host port 8000  
  
  order_db:
    image: postgres:latest  # Use the official PostgreSQL image
    restart: always
    container_name: order_db_container
    environment:
        - POSTGRES_USER=${POSTGRES_USER_ORDER}
        - POSTGRES_PASSWORD=${POSTGRES_PASSWORD_ORDER}
        - POSTGRES_DB=${POSTGRES_DB_ORDER}
    ports:
        - '5437:5432'
    volumes:
        - order_db:/var/lib/postgresql/data
  
  notification_services:
    build: 
      context: ./notification_services
      dockerfile: Dockerfile
    volumes:
      - ./notification_services:/code
    depends_on:
      # - notification_db
      - broker
    ports:
      - "8004:8000"
  
  # notification_db:
  #   image: postgres:latest
  #   restart : always
  #   container_name: notification_db_container
  #   environment:
  #     - POSTGRES_USER=hasaanqureshi
  #     - POSTGRES_PASSWORD=Abcd9196
  #     - POSTGRES_DB=notification_service_db
  #   ports:
  #     - "5438:5432"
  #   volumes:
  #     - notification_db:/var/lib/postgresql/data

  
  payment_services:
    build: 
      context: ./payment_services
      dockerfile: Dockerfile
    volumes:
      - ./payment_services:/code
    depends_on:
      - payment_db
      - broker
    ports:
      - "8005:8000"

  payment_db:
    image: postgres:latest
    restart: always
    container_name: payment_db_container
    environment:
      - POSTGRES_USER=${POSTGRES_USER_PAYMENT}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD_PAYMENT}
      - POSTGRES_DB=${POSTGRES_DB_PAYMENT}
    ports:
      - "5439:5432"
    volumes:
      - payment_db:/var/lib/postgresql/data

  # pgadmin:
  #   image: dpage/pgadmin4:latest
  #   environment:
  #     PGADMIN_DEFAULT_EMAIL= hasaanqureshi195@gmail.com
  #     PGADMIN_DEFAULT_PASSWORD= Abcd9197
  #   ports:
  #     -"5050:80"
  #   depends_on:
  #     - product_db
  #     - inventory_db
  #     - user_services_db
  #     - order_services_db
  # pgadmin:
  #   image: dpage/pgadmin4:latest
  #   container_name: pgadmin
  #   environment:
  #     PGADMIN_DEFAULT_EMAIL: hasaanqureshi150@gmail.com
  #     PGADMIN_DEFAULT_PASSWORD: Abcd9197
  #   ports:
  #     - "8080:80"
  #   depends_on:
  #     - product_db
  #     - inventory_db
  #     - user_services_db
  #     - order_services_db

  
  broker:
    image: apache/kafka:3.7.0
    hostname: broker
    container_name: broker
    ports:
      - '9093:9092'
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT'
      KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT_HOST://localhost:9092,PLAINTEXT://broker:19092'
      KAFKA_PROCESS_ROLES: 'broker,controller'
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@broker:29093'
      KAFKA_LISTENERS: 'CONTROLLER://:29093,PLAINTEXT_HOST://:9092,PLAINTEXT://:19092'
      KAFKA_INTER_BROKER_LISTENER_NAME: 'PLAINTEXT'
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      CLUSTER_ID: '4L6g3nShT-eMCtK--X86sw'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_LOG_DIRS: '/tmp/kraft-combined-logs'

  kafka-ui:
    image: provectuslabs/kafka-ui
    container_name: kafka-ui
    ports:
      - "8081:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: 'Local Kafka Cluster'
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: 'broker:19092'
      DYNAMIC_CONFIG_ENABLED: "true"
    depends_on:
      - broker

volumes:
  product_db:
    driver: local
  inventory_db:
    driver: local
  user_db:
    driver: local
  order_db:
    driver: local
  # notification_db:
  #   driver: local
  payment_db:
    driver: local
    
networks:
  default:
    driver: bridge